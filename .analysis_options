analyzer:
  strong-mode: true
  exclude:

linter:
  rules:
    # Error Rules
    - avoid_empty_else
    - hash_and_equals
    - cancel_subscriptions
    - close_sinks
    - comment_references
    - control_flow_in_finally
    - empty_statements
    - hash_and_equals
    - invariant_booleans
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - test_types_in_equals
    - throw_in_finally
    - unrelated_type_equality_checks
    - valid_regexps

    # Style Rules

    # Type rules
    # Issue:  How to always specify public and interface types
  #  - type_annotate_public_apis
    - type_init_formals
    - always_declare_return_types
    - avoid_return_types_on_setters
    - camel_case_types
   # - always_specify_types
    - annotate_overrides

    # Naming rules
    - constant_identifier_names
    - library_names
    - library_prefixes
    - non_constant_identifier_names
    - package_prefixed_library_names
    - package_names

    # Expression rules
    - avoid_as
    - avoid_init_to_null
    - await_only_futures
    - empty_constructor_bodies
    - empty_catches
    - empty_constructor_bodies
    - implementation_imports
    - one_member_abstracts
    - only_throw_errors
    - parameter_assignments
    - prefer_final_fields
    - prefer_is_not_empty
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - super_goes_last
  #  - type_annotate_public_apis
    - type_init_formals
    - unawaited_futures
    - unnecessary_brace_in_string_interp
    - unnecessary_getters_setters

    # Documentation
  #  - package_api_docs
  #  - package_api_docs
  #  - public_member_api_docs
    - slash_for_doc_comments

